// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  registrations Registration[]
  ideas        Idea[]
  polls        Poll[]
  votes        Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Game Night Central Models
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  events Event[]
}

model Event {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String?
  date        DateTime
  endDate     DateTime?
  location    String?
  maxCapacity Int?
  pricing     Json        // Flexible pricing structure
  status      EventStatus @default(DRAFT)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  registrations Registration[]
  polls         Poll[]
}

model Registration {
  id          String               @id @default(cuid())
  status      RegistrationStatus   @default(PENDING)
  guestCount  Int                  @default(1)
  totalAmount Float?
  paymentStatus PaymentStatus      @default(PENDING)
  specialRequests String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  eventId String
  userId  String

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model Idea {
  id          String   @id @default(cuid())
  title       String
  description String
  status      IdeaStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Poll {
  id          String   @id @default(cuid())
  title       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  eventId String
  userId  String

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  options PollOption[]
  votes   Vote[]
}

model PollOption {
  id     String @id @default(cuid())
  text   String
  order  Int

  pollId String
  poll   Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)

  votes Vote[]
}

model Vote {
  id String @id @default(cuid())

  pollId       String
  pollOptionId String
  userId       String

  poll       Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOption PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId])
}

// Enums
enum Role {
  USER
  VOLUNTEER
  ADMIN
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  ATTENDED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  CANCELLED
}

enum IdeaStatus {
  PENDING
  APPROVED
  REJECTED
  IMPLEMENTED
}
